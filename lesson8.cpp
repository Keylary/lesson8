#include <iostream>
#include <cstdlib>


// 2. Написать класс Ex, хранящий вещественное число x и имеющий конструктор по вещественному числу, инициализирующий x значением параметра.
// Написать класс Bar, хранящий вещественное число y(конструктор по умолчанию инициализирует его нулем) и имеющий метод set с единственным вещественным параметром a.
// Если y + a > 100, возбуждается исключение типа Ex с данными ay, иначе в y заносится значение a.
// В функции main завести переменную класса Bar и в цикле в блоке try вводить с клавиатуры целое n.
// Использовать его в качестве параметра метода set до тех пор, пока не будет введено 0. 
//В обработчике исключения выводить сообщение об ошибке, содержащее данные объекта исключения.



// 3. Написать класс «робот», моделирующий перемещения робота по сетке 10x10, у которого есть метод, означающий задание переместиться на соседнюю позицию.
// Эти методы должны запускать исключение OffTheField, если робот должен уйти с сетки, и IllegalCommand, 
// если подана неверная команда(направление не находится в нужном диапазоне).
// Объект исключения должен содержать всю необходимую информацию — текущую позицию и направление движения.
// Написать функцию main, пользующуюся этим классом и перехватывающую все исключения от его методов, а также выводящую подробную информацию о всех возникающих ошибках.


int main()
{
    // 1. Написать шаблонную функцию div, которая должна вычислять результат деления двух параметров и запускать исключение DivisionByZero, если второй параметр равен 0. 
    // В функции main выводить результат вызова функции div в консоль, а также ловить исключения.

    int a;
    int b;
    std::cout << "Enter the first integer number:" << std::endl;
    std::cin >> a;
    std::cout << "Enter the second integer number:" << std::endl;
    std::cin >> b;

    div_t divresult;
    divresult = div(a, b);
    std::cout << a <<" / " <<b << ".  Quotient is "  << divresult.quot
        << ", remainder is " << divresult.rem<< "."<<std::endl;
    //try // ищем исключения, которые выбрасываются в блоке try, и отправляем их для обработки в блок(и) catch
    //{
    //     div(a, b);
    //}
    //catch (const char* exception) // обработка исключений типа const char*
    //{
    //    std::cerr << "Error: " << exception << std::endl;
    //}


    return 0;
}
